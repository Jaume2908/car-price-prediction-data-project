#IMPORTAMOS LAS LIBRER√çAS NECESARIAS PARA EL AN√ÅLISIS DE DATOS, VISUALIZACI√ìN Y APLICACI√ìN DE STREAMLIT
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import plotly.express as px
from PIL import Image
import urllib.request
import json
import os
import ssl


#CARGAMOS EL DATASET
df = pd.read_csv('car_price.csv')

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Opticar - Soluciones Rentables", layout="wide")

# Cargar el banner desde la carpeta del proyecto
banner = Image.open("banner_opticar.jpg")

# Mostrar el banner en la parte superior de la aplicaci√≥n
st.image(banner, use_column_width=True)

# Aplicar estilos personalizados al men√∫ lateral
st.markdown("""
    <style>
        /* Fondo del men√∫ lateral */
        [data-testid="stSidebar"] {
            background-color: #CD9C5C !important;
        }

        /* Texto del men√∫ lateral */
        [data-testid="stSidebar"] * {
            color: white !important;
        }

        /* T√≠tulos en negrita */
        [data-testid="stSidebar"] h1, [data-testid="stSidebar"] h2, [data-testid="stSidebar"] h3 {
            font-weight: bold;
        }

        /* Alinear mejor el contenido */
        [data-testid="stSidebarContent"] {
            padding: 20px;
        }
    </style>
""", unsafe_allow_html=True)

# Configuraci√≥n del men√∫ lateral
menu_lateral = st.sidebar.radio("Selecciona una opci√≥n:", 
    ["Introducci√≥n", "Visi√≥n General", "Segmentaci√≥n de Ventas", "Tendencias del Mercado", "Modelo predictivo","Conclusiones"]
)

# SOLO SE MUESTRA LA INTRODUCCI√ìN CUANDO SE SELECCIONA "Introducci√≥n"
if menu_lateral == "Introducci√≥n":
    st.markdown('<h3 style="color: #A1753F; font-family: Cambria;">Nuestro objetivo</h3>', unsafe_allow_html=True)
    st.write(
        "Nuestro objetivo es proporcionar herramientas innovadoras basadas en datos "
        "que permitan a concesionarios y particulares maximizar el potencial econ√≥mico "
        "de cada veh√≠culo, impulsando decisiones m√°s estrat√©gicas y rentables."
    )

    st.write("""
    El presente informe tiene como finalidad asesorar a AutoMaster Select, un concesionario especializado en la venta 
    de veh√≠culos de segunda mano, en la segmentaci√≥n estrat√©gica de sus ventas. Para ello, se ha llevado a cabo un 
    an√°lisis exhaustivo de datos obtenidos mediante t√©cnicas de web scraping.

    A trav√©s de este estudio, buscamos proporcionar a AutoMaster Select una visi√≥n clara y basada en datos que le
    permita optimizar su estrategia comercial, mejorar la rentabilidad y potenciar su posicionamiento competitivo en el 
    sector. Se presentar√°n hallazgos clave que permitir√°n definir segmentos de clientes, ajustar estrategias de precios 
    y maximizar el retorno de inversi√≥n en el inventario de veh√≠culos.

    Este an√°lisis ser√° una herramienta fundamental para la toma de decisiones informadas, permitiendo a la empresa 
    ajustar su oferta a la demanda real del mercado y garantizar una ventaja competitiva sostenible.
    """)

    # Descripci√≥n de las variables
    st.markdown('<h3 style="color: #A1753F; font-family: Cambria;">Descripci√≥n de las variables analizadas</h3>', unsafe_allow_html=True)
    st.markdown("""
    El dataset proporcionado por AutoMaster Select contiene informaci√≥n detallada sobre las caracter√≠sticas de los veh√≠culos, 
    entre las cuales se encuentran:
    - <span style="color: #AF6926; font-family: Cambria;"><b>Marca</b></span>: Marca del veh√≠culo.
    - <span style="color: #AF6926; font-family: Cambria;"><b>Modelo</b></span>: Modelo del veh√≠culo.
    - <span style="color: #AF6926; font-family: Cambria;"><b>A√±o</b></span>: A√±o de fabricaci√≥n del veh√≠culo.
    - <span style="color: #AF6926; font-family: Cambria;"><b>Kilometraje</b></span>: Kilometraje del veh√≠culo.
    - <span style="color: #AF6926; font-family: Cambria;"><b>Tipo de combustible</b></span>: Tipo de combustible utilizado por el veh√≠culo.
    - <span style="color: #AF6926; font-family: Cambria;"><b>Tipo de transmisi√≥n</b></span>: Tipo de transmisi√≥n del veh√≠culo.
    - <span style="color: #AF6926; font-family: Cambria;"><b>Potencia</b></span>: Potencia del veh√≠culo en caballos de fuerza.
    - <span style="color: #AF6926; font-family: Cambria;"><b>Precio</b></span>: Precio de venta del veh√≠culo.
    - <span style="color: #AF6926; font-family: Cambria;"><b>Ubicaci√≥n</b></span>: Ubicaci√≥n del veh√≠culo.
    """, unsafe_allow_html=True)

    st.write("""
    En el men√∫ lateral se podr√°n visualizar diferentes secciones que contienen an√°lisis detallados.""")

    st.markdown("""
    <hr>
    <p style="text-align: center; font-size: 14px; color: #7D6B5B; font-style: italic;">
        <i>El presente informe ha sido elaborado en el margen de la relaci√≥n contractual entre <b>Opticar</b> y <b>AutoMaster Select</b>,
        con el prop√≥sito de proporcionar asesoramiento estrat√©gico basado en el an√°lisis de datos. Toda la informaci√≥n contenida en este
        documento es confidencial y ha sido obtenida de fuentes de datos recopiladas mediante t√©cnicas de web scraping. Su uso est√° estrictamente
        limitado a los t√©rminos y condiciones acordados entre ambas partes.</i>
    </p>
""", unsafe_allow_html=True)


# VISI√ìN GENERAL DE LOS DATOS
elif menu_lateral == "Visi√≥n General":
    st.markdown("## üìä Visi√≥n General")
    st.write("Se realiza un an√°lisis exploratorio de los datos para obtener una visi√≥n general de los datos obtenidos por la empresa.")

# SOLO SE MUESTRA SEGMENTACI√ìN CUANDO SE SELECCIONA ESA OPCI√ìN
elif menu_lateral == "Segmentaci√≥n de Ventas":
    st.markdown("## üìå Segmentaci√≥n de Ventas")
    st.write("An√°lisis detallado de la segmentaci√≥n de clientes y ventas.")
    sub_option = st.sidebar.radio(
        "Selecciona una subcategor√≠a:",
        ["Segmentaci√≥n por comunidad aut√≥noma", "Segmentaci√≥n por marca", "Segmentaci√≥n por potencia"]
    )
    if sub_option == "Segmentaci√≥n por comunidad aut√≥noma":
        st.write("üåç **An√°lisis de ventas por comunidad aut√≥noma**")
    elif sub_option == "Segmentaci√≥n por marca":
        st.write("üöó **An√°lisis de ventas por marca**")
    elif sub_option == "Segmentaci√≥n por potencia":
        st.write("üèéÔ∏è **An√°lisis de ventas por potencia**")

# SOLO SE MUESTRA TENDENCIAS CUANDO SE SELECCIONA ESA OPCI√ìN
elif menu_lateral == "Tendencias del Mercado":
    st.markdown("## üìà Tendencias del Mercado")
    st.write("Exploraci√≥n de tendencias y patrones en el mercado automotriz.")

# SOLO SE MUESTRA CONCLUSIONES CUANDO SE SELECCIONA ESA OPCI√ìN
elif menu_lateral == "Conclusiones":
    st.markdown("## ‚úÖ Conclusiones")
    st.write("Puntos clave y recomendaciones estrat√©gicas.")

elif menu_lateral =="Modelo predictivo":

    #Variables de entrada para el modelo predictivo
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------
    st.markdown("## üìä Modelo predictivo"
                )

    '''Para que la marca sea correlativa con el modelo a la hora de introducir el input en la aplicaci√≥n, crearemos un diccionario en el que para cada marca
    introduzcamos los modelos que tiene. De esta forma, cuando el usuario introduzca una marca, podr√° seleccionar el modelo correspondiente.'''
    makes_models_dict = (
    df.groupby("make")["model"]
      .unique()          # Devuelve los modelos √∫nicos por marca
      .apply(list)       # Convierte el array de modelos en lista
      .to_dict() )        # Transforma el resultado en diccionario
    
    # Marcas de coches
    marca_seleccionada = st.selectbox("Selecciona la marca del veh√≠culo", list(makes_models_dict.keys()))

    # Modelos de coches
    modelo_seleccionado = st.selectbox("Selecciona el modelo del veh√≠culo", makes_models_dict[marca_seleccionada])

    #Tipo de combustible
    fuel = st.selectbox("Selecciona el tipo de combustible", df["fuel"].unique().tolist())

    # A√±o
    year = int(st.number_input("Introduce el a√±o de fabricaci√≥n", min_value=1967, max_value=2023, value=2000, step=1))

    # Kilometraje
    kms = int(st.number_input("Introduce el kilometraje", min_value=0, max_value=750000, value=20000, step=100))

    # Potencia
    power = int(st.number_input("Introduce la potencia en caballos de fuerza", min_value=5, max_value=999, value=100, step=20))
    
    # Transmisi√≥n
    transmission_dict = {"manual": "Manual", "automatic": "Autom√°tico"}
    transmission = st.selectbox("Selecciona el tipo de transmisi√≥n", [transmission_dict[t] for t in df["shift"].unique()])
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------
    #Inferencia del modelo
    if st.button("üîç Predecir Precio del Veh√≠culo"):

        def allowSelfSignedHttps(allowed):
        # bypass the server certificate verification on client side
            if allowed and not os.environ.get('PYTHONHTTPSVERIFY', '') and getattr(ssl, '_create_unverified_context', None):
                ssl._create_default_https_context = ssl._create_unverified_context


        allowSelfSignedHttps(True)  # Habilita certificados auto-firmados si es necesario

        # Datos en el formato requerido por la API
        data = {
            "Inputs": {
                "data": {
                    "make": [marca_seleccionada],
                    "model": [modelo_seleccionado],
                    "fuel": [fuel],
                    "year": [year],
                    "kms": [kms],
                    "power": [power],
                    "transmission": [transmission]
                }
            },
            "GlobalParameters": 1.0
        }

        body = str.encode(json.dumps(data))

        url = '' 
        api_key = ''  
        if not api_key:
            st.error("‚ö†Ô∏è No se ha proporcionado una clave API v√°lida.")
        else:
            headers = {'Content-Type': 'application/json', 'Authorization': ('Bearer ' + api_key)}

            req = urllib.request.Request(url, body, headers)

            try:
                response = urllib.request.urlopen(req)
                result = response.read()
                result_json = json.loads(result)
                predicted_price = int(result_json["Results"][0])

                st.success(f"üí∞ Precio Estimado: **{predicted_price}‚Ç¨**")

            except urllib.error.HTTPError as error:
                st.error(f"‚ö†Ô∏è La solicitud fall√≥ con c√≥digo de estado: {error.code}")
                st.text(error.info())
                st.text(error.read().decode("utf8", 'ignore'))

